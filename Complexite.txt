c- Coût	N- Nombre d'itérations
int ProblemMaxSomme::algo1()		
		
{		
    int res = 0;	c1	1
		
    for (int i = 0; i < t.size(); i++)	c2	N
    {		
        int s = t[i];	c3	N
        for (int j = i; j < t.size(); j++)	c4	N*N
        {		
            if (i != j)	c5	N*N
                s += t[j];	c6	N*N
		
            if (s > res)	c7	N*N
            {		
                res = s;	c8	N*N
            }		
        }		
    }		
    return res;		
}		
		
Nombre total d’opérations= c1 + (c2 + c3 )*N + (c4 + c5 + c6 + c7 + c8) * N * N = O(N²) 		
		
		
int ProblemMaxSomme::algo2()		
{		
		
    int sum=0;	c1	1
    int res=0;	c2	1
    int s;	c3	1
		
    for (int i = 0; i < t.size(); i++)	c4	N
    {		
        sum += t[i];	c5	N
        Somme.push_back(sum);	c6	N
       // res = sum;	c7	N
    }		
		
    for (int i = 0; i < t.size(); i++)	c8	N
    {		
        for (int j = i; j< t.size(); j++)	c9	N * N
        {		
            if (i==0)	c10	N * N
            {		
                s = Somme[j];	c11	N * N
            }		
            else		
            {		
                s = Somme[j] - Somme[i-1];	c12	N * N
            }		
		
            if(s>res)	c13	N * N
            {		
                res=s;	c14	N * N
		
            }		
               // cout<<"S i,j= "<<res<<endl;		
        }		
    }		
    return res;		
}		
		
Nombre total d’opérations= c1 + c2 + c3 + (c4 + c5 +c6+c7+c8)*N + (c9 + c10 + c11 + c12 + c13+c14) * N * N = O(N²)

int ProblemMaxSomme::algo3(int a,int b)
{
            if (a>b){
                return 0;
            }
            if (a==b){
                if (t[a] > 0)
                {
                    return t[a];
                }
                else
                {
                    return 0;
                }
            }

        int c=(a+b)/2;
        int amax=0;
        int somme=0;
        int i = c;
        while (i >= a){
            somme = somme + t[i];
            amax = max(amax,somme);
            i = i-1;
        }
        int bmax=0;
        somme=0;
        i = c + 1;
        while (i <= b){
            somme = somme + t[i];
            bmax = max(bmax,somme);
            i = i+1;
        }
    return max3(amax+bmax,algo3(a,c),algo3(c+1,b));
}

Nombre total d’opérations= O(nlog(n))

int ProblemMaxSomme::algo4()
{
int a=0;
int b=0;
int i=0;
while(i<t.size()){
    b= max(b + t[i],0);
    a= max(a,b);
    i=i+1;
    }
    return a;

}

Nombre total d’opérations= O(n)


 

